// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name IrisPayUI
import DeveloperToolsSupport
import Foundation
@_exported import IrisPayUI
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc(IPUILanguage) public enum IPUILanguage : Swift.Int, Swift.CaseIterable {
  case bg
  case en
  public func getLanguageString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [IrisPayUI.IPUILanguage]
  public typealias RawValue = Swift.Int
  public static var allCases: [IrisPayUI.IPUILanguage] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(IPUISupportedCountry) public enum IPUISupportedCountry : Swift.Int, Swift.CaseIterable {
  case all
  case bulgaria
  case greece
  case romania
  case slovakia
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [IrisPayUI.IPUISupportedCountry]
  public typealias RawValue = Swift.Int
  public static var allCases: [IrisPayUI.IPUISupportedCountry] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(IrisPayUI) final public class IrisPayUI : ObjectiveC.NSObject {
  @objc public static var appearance: IrisPayUI.IPUIAppearance
  @objc deinit
  @available(*, unavailable, renamed: "init(irisHash:environment:irisInstanceURL:appearance:language:)")
  public init(irisHash: Swift.String, irisURL: Foundation.URL? = nil, appearance: IrisPayUI.IPUIAppearance = IPUIAppearance(), language: IrisPayUI.IPUILanguage = .bg)
  @objc public init(irisHash: Swift.String, environment: IrisPayUI.IPUIEnvironment, irisInstanceURL: Foundation.URL? = nil, appearance: IrisPayUI.IPUIAppearance = IPUIAppearance(), language: IrisPayUI.IPUILanguage = .bg)
  @objc final public func setUserHash(_ hash: Swift.String)
  @objc final public func startLogin(delegate: any IrisPayUI.IPUIDelegate)
  @objc final public func addIBAN(withBankHash bankHash: Swift.String? = nil, country: IrisPayUI.IPUISupportedCountry = .all, webhookHash: Swift.String? = nil, delegate: any IrisPayUI.IPUIIbanDelegate)
  @objc final public func openRedirectedURL(_ url: Foundation.URL)
  @objc final public func startPaymentWithoutConsent(paymentModel: IrisPayUI.IPUIPayment, country: IrisPayUI.IPUISupportedCountry = .all, hookHash: Swift.String? = nil, ibanHookHash: Swift.String? = nil, delegate: any IrisPayUI.IPUIDelegate)
  @objc final public func payByClick(paymentHash: Swift.String, delegate: any IrisPayUI.IPUIDelegate)
  @objc final public func startDomesticOrSEPAPayment(country: IrisPayUI.IPUISupportedCountry = .all, hookHash webhookHash: Swift.String? = nil, ibanHookHash: Swift.String? = nil, delegate: any IrisPayUI.IPUIPaymentDelegate)
  @objc final public func startBudgetPayment(country: IrisPayUI.IPUISupportedCountry = .all, hookHash webhookHash: Swift.String? = nil, ibanHookHash: Swift.String? = nil, delegate: any IrisPayUI.IPUIPaymentDelegate)
  @objc final public func paymentWithCode(_ code: Swift.String, delegate: any IrisPayUI.IPUIPaymentDelegate)
  @available(*, deprecated, message: "This method should not be used anymore and may not work correctly.")
  final public func startPayment(withIBAN iban: Swift.String? = nil, delegate: any IrisPayUI.IPUIDelegate)
  @available(*, deprecated, renamed: "paymentWithCode(_:delegate:)", message: "This method should not be used anymore and may not work correctly.")
  @objc final public func confirmPayment(withCode code: Swift.String, webhookHash: Swift.String? = nil, delegate: any IrisPayUI.IPUIPaymentDelegate)
}
@_inheritsConvenienceInitializers @objc(IPUIAppearance) public class IPUIAppearance : ObjectiveC.NSObject {
  @objc public enum CornerCurve : Swift.Int {
    case circular, continuous
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum IPUIInterfaceStyle : Swift.Int {
    case light, dark, unspecified
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var interfaceStyle: IrisPayUI.IPUIAppearance.IPUIInterfaceStyle
  @objc public var tintColor: UIKit.UIColor
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var bodyFont: UIKit.UIFont
  @objc public var emphasizedBodyFont: UIKit.UIFont
  @objc public var titleFont: UIKit.UIFont
  @objc public var navigationTitleFont: UIKit.UIFont
  @objc public var listBackgroundColor: UIKit.UIColor?
  @objc public var listStyle: UIKit.UITableView.Style
  @objc public var listSeparatorStyle: UIKit.UITableViewCell.SeparatorStyle
  @objc public var listItemTitleLabelFont: UIKit.UIFont?
  @objc public var listItemTitleTextColor: UIKit.UIColor
  @objc public var listItemDetailTextColor: UIKit.UIColor
  @objc public var fieldHeight: CoreFoundation.CGFloat
  @objc public var fieldCornerRadius: CoreFoundation.CGFloat
  @objc public var fieldCornerCurve: IrisPayUI.IPUIAppearance.CornerCurve
  @objc public var fieldBorderWidth: CoreFoundation.CGFloat
  @objc public var fieldBorderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var fieldBackgroundColor: UIKit.UIColor?
  @objc public var fieldDisabledBackgroundColor: UIKit.UIColor?
  @objc public var fieldTextIndent: CoreFoundation.CGFloat
  @objc public var fieldBorderStyle: UIKit.UITextField.BorderStyle
  @objc public var fieldFont: UIKit.UIFont?
  @objc public var fieldTextColor: UIKit.UIColor
  @objc public var fieldDisabledTextColor: UIKit.UIColor
  @objc public var buttonHeight: CoreFoundation.CGFloat
  @objc public var buttonCornerRadius: CoreFoundation.CGFloat
  @objc public var buttonCornerCurve: IrisPayUI.IPUIAppearance.CornerCurve
  @objc public var buttonFont: UIKit.UIFont?
  @objc public var buttonBackgroundColor: UIKit.UIColor?
  @objc public var buttonTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc public var buttonEdgeInsets: UIKit.UIEdgeInsets
  @objc public var isButtonTextAllCaps: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc(IPUIPayment) public class IPUIPayment : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let desc: Swift.String
  @objc final public let currency: Swift.String
  @objc final public let publicHash: Swift.String
  @objc final public let toIban: Swift.String
  @objc final public let emailNotification: Swift.Bool
  @objc final public let sum: Foundation.Decimal
  @available(*, unavailable, message: "Not used anymore")
  @objc public var regulatoryReportType: Swift.String? {
    @objc get
  }
  @available(*, unavailable, message: "Not used anymore")
  @objc public var identifier: Swift.String? {
    @objc get
  }
  @available(*, unavailable, message: "Not used anymore")
  @objc public var identifierType: Swift.String? {
    @objc get
  }
  @available(*, unavailable, message: "Not used anymore")
  @objc public var paymentCategory: Swift.String? {
    @objc get
  }
  @available(*, unavailable, message: "Not used anymore")
  @objc public var fromDate: Foundation.Date? {
    @objc get
  }
  @available(*, unavailable, message: "Not used anymore")
  @objc public var endDate: Foundation.Date? {
    @objc get
  }
  @available(*, unavailable, message: "Not used anymore")
  @objc public var documentNumber: Swift.String? {
    @objc get
  }
  @available(*, unavailable, message: "Not used anymore")
  @objc public var documentDate: Foundation.Date? {
    @objc get
  }
  @available(*, unavailable, message: "Not used anymore")
  @objc public var ultimateDebtor: Swift.String? {
    @objc get
  }
  @objc public init(description: Swift.String, currency: Swift.String, publicHash: Swift.String, toIban: Swift.String, emailNotification: Swift.Bool, sum: Foundation.Decimal)
  @available(*, unavailable, message: "Not used anymore. Please call the startBudgetPayment(country:hookHash:ibanHookHash:delegate:) IrisPayUI instance method.")
  @objc public init(description: Swift.String, currency: Swift.String, publicHash: Swift.String, toIban: Swift.String, emailNotification: Swift.Bool, sum: Foundation.Decimal, regulatoryReportType: Swift.String, identifier: Swift.String, identifierType: IrisPayUI.IPUIIdentifierType, paymentCategory: Swift.String, fromDate: Foundation.Date, endDate: Foundation.Date, documentNumber: Swift.String, documentDate: Foundation.Date, ultimateDebtor: Swift.String)
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func target(forAction action: ObjectiveC.Selector, withSender sender: Any?) -> Any?
}
@objc(IPUIEnvironment) public enum IPUIEnvironment : Swift.Int, Swift.CaseIterable {
  case sandbox
  case production
  public func getEnvironmentString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [IrisPayUI.IPUIEnvironment]
  public typealias RawValue = Swift.Int
  public static var allCases: [IrisPayUI.IPUIEnvironment] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@available(*, deprecated, renamed: "IPUIDelegate")
public protocol IrisUIDelegate : UIKit.UIViewController {
  func ready(result: Any?)
}
@objc(IPUIDelegate) public protocol IPUIDelegate {
  @objc func ready(result: Swift.String?)
}
@objc(IPUIIbanDelegate) public protocol IPUIIbanDelegate : IrisPayUI.IPUIDelegate {
  @objc func ibanAdded(result: Swift.String?)
}
@objc(IPUIPaymentDelegate) public protocol IPUIPaymentDelegate : IrisPayUI.IPUIDelegate {
  @available(*, deprecated, message: "Will not be called anymore.")
  @objc optional func gotConsent(_ consent: Swift.String)
  @objc func paymentCompleted(result: Swift.String?)
}
@objc(IPUIIdentifierType) public enum IPUIIdentifierType : Swift.Int, Swift.CaseIterable {
  case EGN
  case EIK
  case PNF
  public func getIdentifierTypeString() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [IrisPayUI.IPUIIdentifierType]
  public typealias RawValue = Swift.Int
  public static var allCases: [IrisPayUI.IPUIIdentifierType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension IrisPayUI.IPUILanguage : Swift.Equatable {}
extension IrisPayUI.IPUILanguage : Swift.Hashable {}
extension IrisPayUI.IPUILanguage : Swift.RawRepresentable {}
extension IrisPayUI.IPUISupportedCountry : Swift.Equatable {}
extension IrisPayUI.IPUISupportedCountry : Swift.Hashable {}
extension IrisPayUI.IPUISupportedCountry : Swift.RawRepresentable {}
extension IrisPayUI.IPUIAppearance.CornerCurve : Swift.Equatable {}
extension IrisPayUI.IPUIAppearance.CornerCurve : Swift.Hashable {}
extension IrisPayUI.IPUIAppearance.CornerCurve : Swift.RawRepresentable {}
extension IrisPayUI.IPUIAppearance.IPUIInterfaceStyle : Swift.Equatable {}
extension IrisPayUI.IPUIAppearance.IPUIInterfaceStyle : Swift.Hashable {}
extension IrisPayUI.IPUIAppearance.IPUIInterfaceStyle : Swift.RawRepresentable {}
extension IrisPayUI.IPUIEnvironment : Swift.Equatable {}
extension IrisPayUI.IPUIEnvironment : Swift.Hashable {}
extension IrisPayUI.IPUIEnvironment : Swift.RawRepresentable {}
extension IrisPayUI.IPUIIdentifierType : Swift.Equatable {}
extension IrisPayUI.IPUIIdentifierType : Swift.Hashable {}
extension IrisPayUI.IPUIIdentifierType : Swift.RawRepresentable {}
